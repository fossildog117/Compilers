
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\025\006\000\002\011\004\000" +
    "\002\011\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\006\000\002\004\005\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\011\000\002\004\013" +
    "\000\002\004\005\000\002\004\006\000\002\004\005\000" +
    "\002\004\004\000\002\004\003\000\002\017\010\000\002" +
    "\017\007\000\002\020\005\000\002\020\007\000\002\007" +
    "\007\000\002\010\015\000\002\010\013\000\002\010\014" +
    "\000\002\010\012\000\002\010\013\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\006" +
    "\000\002\013\006\000\002\013\003\000\002\015\010\000" +
    "\002\015\006\000\002\015\006\000\002\026\005\000\002" +
    "\027\005\000\002\012\011\000\002\012\010\000\002\030" +
    "\005\000\002\006\003\000\002\006\005\000\002\022\003" +
    "\000\002\022\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\005\000\002\005" +
    "\004\000\002\005\005\000\002\005\003\000\002\005\005" +
    "\000\002\005\007\000\002\005\007\000\002\005\010\000" +
    "\002\005\004\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\024\003\000\002\024" +
    "\005\000\002\024\005\000\002\024\006\000\002\024\006" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\014\004\ufffb\020\ufffb\021\ufffb\022\ufffb\063" +
    "\ufffb\001\002\000\004\002\334\001\002\000\014\004\012" +
    "\020\020\021\016\022\007\063\017\001\002\000\016\002" +
    "\ufffd\004\ufffd\020\ufffd\021\ufffd\022\ufffd\063\ufffd\001\002" +
    "\000\024\005\036\006\032\007\031\010\035\014\034\063" +
    "\040\065\030\066\041\071\033\001\002\000\016\002\ufffe" +
    "\004\ufffe\020\ufffe\021\ufffe\022\ufffe\063\ufffe\001\002\000" +
    "\016\002\uffff\004\uffff\020\uffff\021\uffff\022\uffff\063\uffff" +
    "\001\002\000\004\040\325\001\002\000\014\002\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\063\ufffb\001\002\000\010\044\300" +
    "\061\301\074\152\001\002\000\016\002\ufffc\004\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\063\ufffc\001\002\000\004\063\077" +
    "\001\002\000\062\034\uffb2\035\uffb2\036\uffb2\037\uffb2\042" +
    "\072\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\067\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\001\002\000\004\063\021\001\002\000\004\040\022\001" +
    "\002\000\006\041\025\063\024\001\002\000\006\041\065" +
    "\067\064\001\002\000\004\061\027\001\002\000\004\045" +
    "\026\001\002\000\100\002\uffe8\004\uffe8\011\uffe8\012\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8\047\uffe8\053" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\071\uffe8\072\uffe8\076\uffe8" +
    "\077\uffe8\001\002\000\024\005\036\006\032\007\031\010" +
    "\035\014\034\063\040\065\030\066\041\071\033\001\002" +
    "\000\040\005\uffdf\006\uffdf\007\uffdf\010\uffdf\014\uffdf\041" +
    "\uffdf\044\uffdf\045\uffdf\057\uffdf\063\uffdf\065\uffdf\066\uffdf" +
    "\067\uffdf\071\uffdf\073\uffdf\001\002\000\004\052\047\001" +
    "\002\000\040\005\uffdb\006\uffdb\007\uffdb\010\uffdb\014\uffdb" +
    "\041\uffdb\044\uffdb\045\uffdb\057\uffdb\063\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\071\uffdb\073\uffdb\001\002\000\040\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\014\uffda\041\uffda\044\uffda\045" +
    "\uffda\057\uffda\063\uffda\065\uffda\066\uffda\067\uffda\071\uffda" +
    "\073\uffda\001\002\000\004\052\042\001\002\000\040\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\014\uffdc\041\uffdc\044\uffdc" +
    "\045\uffdc\057\uffdc\063\uffdc\065\uffdc\066\uffdc\067\uffdc\071" +
    "\uffdc\073\uffdc\001\002\000\040\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\014\uffdd\041\uffdd\044\uffdd\045\uffdd\057\uffdd\063" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\071\uffdd\073\uffdd\001\002" +
    "\000\010\041\uffe7\067\uffe7\073\uffe7\001\002\000\040\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\014\uffd3\041\uffd3\044\uffd3" +
    "\045\uffd3\057\uffd3\063\uffd3\065\uffd3\066\uffd3\067\uffd3\071" +
    "\uffd3\073\uffd3\001\002\000\040\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\014\uffde\041\uffde\044\uffde\045\uffde\057\uffde\063" +
    "\uffde\065\uffde\066\uffde\067\uffde\071\uffde\073\uffde\001\002" +
    "\000\026\005\036\006\032\007\031\010\035\013\043\014" +
    "\034\063\040\065\030\066\041\071\033\001\002\000\004" +
    "\057\046\001\002\000\004\057\045\001\002\000\040\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\014\uffd5\041\uffd5\044\uffd5" +
    "\045\uffd5\057\uffd5\063\uffd5\065\uffd5\066\uffd5\067\uffd5\071" +
    "\uffd5\073\uffd5\001\002\000\040\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\014\uffd4\041\uffd4\044\uffd4\045\uffd4\057\uffd4\063" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\071\uffd4\073\uffd4\001\002" +
    "\000\026\005\036\006\032\007\031\010\035\013\050\014" +
    "\034\063\040\065\030\066\041\071\033\001\002\000\004" +
    "\067\057\001\002\000\004\067\052\001\002\000\026\005" +
    "\036\006\032\007\031\010\035\013\053\014\034\063\040" +
    "\065\030\066\041\071\033\001\002\000\004\057\056\001" +
    "\002\000\004\057\055\001\002\000\040\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\014\uffd9\041\uffd9\044\uffd9\045\uffd9\057" +
    "\uffd9\063\uffd9\065\uffd9\066\uffd9\067\uffd9\071\uffd9\073\uffd9" +
    "\001\002\000\040\005\uffd7\006\uffd7\007\uffd7\010\uffd7\014" +
    "\uffd7\041\uffd7\044\uffd7\045\uffd7\057\uffd7\063\uffd7\065\uffd7" +
    "\066\uffd7\067\uffd7\071\uffd7\073\uffd7\001\002\000\026\005" +
    "\036\006\032\007\031\010\035\013\060\014\034\063\040" +
    "\065\030\066\041\071\033\001\002\000\004\057\063\001" +
    "\002\000\004\057\062\001\002\000\040\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\014\uffd8\041\uffd8\044\uffd8\045\uffd8\057" +
    "\uffd8\063\uffd8\065\uffd8\066\uffd8\067\uffd8\071\uffd8\073\uffd8" +
    "\001\002\000\040\005\uffd6\006\uffd6\007\uffd6\010\uffd6\014" +
    "\uffd6\041\uffd6\044\uffd6\045\uffd6\057\uffd6\063\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\071\uffd6\073\uffd6\001\002\000\004\063" +
    "\067\001\002\000\004\045\066\001\002\000\100\002\uffe9" +
    "\004\uffe9\011\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\045\uffe9\047\uffe9\053\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\071\uffe9\072\uffe9\076\uffe9\077\uffe9\001\002\000\004\061" +
    "\070\001\002\000\024\005\036\006\032\007\031\010\035" +
    "\014\034\063\040\065\030\066\041\071\033\001\002\000" +
    "\010\041\uffe6\067\uffe6\073\uffe6\001\002\000\006\062\073" +
    "\063\074\001\002\000\004\043\076\001\002\000\004\043" +
    "\075\001\002\000\060\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf" +
    "\061\uffaf\067\uffaf\073\uffaf\074\uffaf\075\uffaf\076\uffaf\001" +
    "\002\000\060\034\uffae\035\uffae\036\uffae\037\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\067\uffae\073\uffae\074\uffae\075\uffae\076\uffae\001\002\000" +
    "\004\072\100\001\002\000\006\063\024\073\102\001\002" +
    "\000\006\067\064\073\314\001\002\000\004\040\103\001" +
    "\002\000\064\011\116\012\135\016\126\017\143\020\020" +
    "\022\142\023\121\025\120\027\133\030\145\031\124\033" +
    "\140\040\127\041\131\042\132\045\uffc7\047\112\053\115" +
    "\062\110\063\146\064\114\071\141\072\111\076\134\077" +
    "\130\001\002\000\050\034\uffc6\035\uffc6\036\302\037\uffc6" +
    "\044\300\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\301" +
    "\074\152\075\uffc6\001\002\000\072\011\ufff3\012\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\045\ufff3\047\ufff3\053\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\071\ufff3\072\ufff3\076\ufff3\077\ufff3\001" +
    "\002\000\064\011\116\012\135\016\126\017\143\020\020" +
    "\022\142\023\121\025\120\027\133\030\145\031\124\033" +
    "\140\040\127\041\273\042\132\045\uffc7\047\112\053\115" +
    "\062\110\063\146\064\114\071\141\072\111\076\134\077" +
    "\130\001\002\000\072\011\ufff1\012\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\045\ufff1\047\ufff1\053\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\071\ufff1\072\ufff1\076\ufff1\077\ufff1\001\002\000\054" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\043\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\067\uffad\073\uffad\075" +
    "\uffad\076\uffad\001\002\000\040\011\116\012\135\016\126" +
    "\017\143\033\140\040\127\042\132\047\112\053\115\062" +
    "\110\063\146\064\114\071\141\072\111\076\134\001\002" +
    "\000\012\011\116\012\135\047\112\062\110\001\002\000" +
    "\004\045\267\001\002\000\052\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\043\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\067\uffc4\073\uffc4\075\uffc4\076\uffc4\001\002\000\040\011" +
    "\116\012\135\016\126\017\143\033\140\040\127\042\132" +
    "\047\112\053\115\062\110\063\146\064\114\071\141\072" +
    "\111\076\134\001\002\000\054\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\043\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab" +
    "\061\uffab\067\uffab\073\uffab\075\uffab\076\uffab\001\002\000" +
    "\072\011\ufff6\012\ufff6\016\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\040\ufff6\041\ufff6\042\ufff6\045\ufff6" +
    "\047\ufff6\053\ufff6\062\ufff6\063\ufff6\064\ufff6\071\ufff6\072" +
    "\ufff6\076\ufff6\077\ufff6\001\002\000\062\011\116\012\135" +
    "\016\126\017\143\020\020\022\142\023\121\025\120\027" +
    "\133\030\145\031\124\033\140\040\127\042\132\045\uffc7" +
    "\047\112\053\115\062\110\063\146\064\114\071\141\072" +
    "\111\076\134\077\130\001\002\000\004\072\252\001\002" +
    "\000\042\034\202\035\200\036\204\037\176\045\uffc8\046" +
    "\203\047\174\050\201\051\206\052\210\054\175\055\212" +
    "\056\207\057\213\060\211\075\205\001\002\000\072\011" +
    "\ufff8\012\ufff8\016\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\040\ufff8\041\ufff8\042\ufff8\045\ufff8\047\ufff8" +
    "\053\ufff8\062\ufff8\063\ufff8\064\ufff8\071\ufff8\072\ufff8\076" +
    "\ufff8\077\ufff8\001\002\000\042\011\116\012\135\016\126" +
    "\017\143\033\140\040\127\042\132\045\uffc7\047\112\053" +
    "\115\062\110\063\146\064\114\071\141\072\111\076\134" +
    "\001\002\000\072\011\ufff2\012\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\045\ufff2\047\ufff2\053\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\071\ufff2\072\ufff2\076\ufff2\077\ufff2\001\002\000\052\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\043\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\067\uffc2\073\uffc2\075\uffc2\076\uffc2" +
    "\001\002\000\004\041\246\001\002\000\006\045\243\062" +
    "\242\001\002\000\004\061\237\001\002\000\042\011\116" +
    "\012\135\016\126\017\143\033\140\040\127\042\132\043" +
    "\234\047\112\053\115\062\110\063\146\064\114\071\141" +
    "\072\111\076\134\001\002\000\006\063\017\071\231\001" +
    "\002\000\040\011\116\012\135\016\126\017\143\033\140" +
    "\040\127\042\132\047\112\053\115\062\110\063\146\064" +
    "\114\071\141\072\111\076\134\001\002\000\054\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\043\uffac\045\uffac\046\uffac\047" +
    "\uffac\050\uffac\051\uffac\052\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\067\uffac\073\uffac\075\uffac\076" +
    "\uffac\001\002\000\052\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\043\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\067\uffc5" +
    "\073\uffc5\075\uffc5\076\uffc5\001\002\000\052\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\043\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\067\uffbc\073\uffbc\075\uffbc\076\uffbc\001\002" +
    "\000\052\034\uffc0\035\uffc0\036\uffc0\037\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\060\uffc0\067\uffc0\073\uffc0\075" +
    "\uffc0\076\uffc0\001\002\000\052\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\043\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\067\uffc3\073\uffc3\075\uffc3\076\uffc3\001\002\000\024\005" +
    "\036\006\032\007\031\010\035\014\034\063\040\065\030" +
    "\066\041\071\033\001\002\000\052\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\067\uffc1\073\uffc1\075\uffc1\076\uffc1\001\002\000\072" +
    "\011\uffea\012\uffea\016\uffea\017\uffea\020\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\040\uffea\041\uffea\042\uffea\045\uffea\047" +
    "\uffea\053\uffea\062\uffea\063\uffea\064\uffea\071\uffea\072\uffea" +
    "\076\uffea\077\uffea\001\002\000\040\011\116\012\135\016" +
    "\126\017\143\033\140\040\127\042\132\047\112\053\115" +
    "\062\110\063\146\064\114\071\141\072\111\076\134\001" +
    "\002\000\064\015\150\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\042\147\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\067\uffb2\073\uffb2\074\uffb2\075\uffb2\076" +
    "\uffb2\001\002\000\016\011\116\012\135\047\112\061\157" +
    "\062\155\063\074\001\002\000\004\063\017\001\002\000" +
    "\054\034\uffb5\035\uffb5\036\uffb5\037\uffb5\043\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\060\uffb5\067\uffb5\073\uffb5\074\152" +
    "\075\uffb5\076\uffb5\001\002\000\006\033\154\063\153\001" +
    "\002\000\060\034\uffb0\035\uffb0\036\uffb0\037\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\067\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\001\002\000" +
    "\060\034\uffb1\035\uffb1\036\uffb1\037\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\067\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\001\002\000\006\043" +
    "\076\061\uffad\001\002\000\004\061\162\001\002\000\012" +
    "\011\116\012\135\047\112\062\110\001\002\000\004\043" +
    "\161\001\002\000\052\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\067\uffb9" +
    "\073\uffb9\075\uffb9\076\uffb9\001\002\000\014\011\116\012" +
    "\135\043\164\047\112\062\110\001\002\000\004\043\165" +
    "\001\002\000\052\034\uffba\035\uffba\036\uffba\037\uffba\043" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\067\uffba\073" +
    "\uffba\075\uffba\076\uffba\001\002\000\052\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\043\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\067\uffb8\073\uffb8\075\uffb8\076\uffb8\001\002\000" +
    "\050\034\202\035\200\036\204\037\176\043\uffca\045\uffca" +
    "\046\203\047\174\050\201\051\206\052\210\054\175\055" +
    "\212\056\207\057\213\060\211\067\uffca\073\uffca\075\205" +
    "\001\002\000\054\034\uffc6\035\uffc6\036\uffc6\037\uffc6\043" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\067\uffc6\073" +
    "\uffc6\074\152\075\uffc6\076\uffc6\001\002\000\006\045\172" +
    "\067\171\001\002\000\040\011\116\012\135\016\126\017" +
    "\143\033\140\040\127\042\132\047\112\053\115\062\110" +
    "\063\146\064\114\071\141\072\111\076\134\001\002\000" +
    "\072\011\uffce\012\uffce\016\uffce\017\uffce\020\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\040\uffce\041\uffce\042\uffce\045\uffce" +
    "\047\uffce\053\uffce\062\uffce\063\uffce\064\uffce\071\uffce\072" +
    "\uffce\076\uffce\077\uffce\001\002\000\050\034\202\035\200" +
    "\036\204\037\176\043\uffc9\045\uffc9\046\203\047\174\050" +
    "\201\051\206\052\210\054\175\055\212\056\207\057\213" +
    "\060\211\067\uffc9\073\uffc9\075\205\001\002\000\040\011" +
    "\uffa8\012\uffa8\016\uffa8\017\uffa8\033\uffa8\040\uffa8\042\uffa8" +
    "\047\uffa8\053\uffa8\062\uffa8\063\uffa8\064\uffa8\071\uffa8\072" +
    "\uffa8\076\uffa8\001\002\000\040\011\uff9e\012\uff9e\016\uff9e" +
    "\017\uff9e\033\uff9e\040\uff9e\042\uff9e\047\uff9e\053\uff9e\062" +
    "\uff9e\063\uff9e\064\uff9e\071\uff9e\072\uff9e\076\uff9e\001\002" +
    "\000\040\011\uffa4\012\uffa4\016\uffa4\017\uffa4\033\uffa4\040" +
    "\uffa4\042\uffa4\047\uffa4\053\uffa4\062\uffa4\063\uffa4\064\uffa4" +
    "\071\uffa4\072\uffa4\076\uffa4\001\002\000\040\011\116\012" +
    "\135\016\126\017\143\033\140\040\127\042\132\047\112" +
    "\053\115\062\110\063\146\064\114\071\141\072\111\076" +
    "\134\001\002\000\040\011\uffa2\012\uffa2\016\uffa2\017\uffa2" +
    "\033\uffa2\040\uffa2\042\uffa2\047\uffa2\053\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\071\uffa2\072\uffa2\076\uffa2\001\002\000\040" +
    "\011\uffa7\012\uffa7\016\uffa7\017\uffa7\033\uffa7\040\uffa7\042" +
    "\uffa7\047\uffa7\053\uffa7\062\uffa7\063\uffa7\064\uffa7\071\uffa7" +
    "\072\uffa7\076\uffa7\001\002\000\040\011\uffa3\012\uffa3\016" +
    "\uffa3\017\uffa3\033\uffa3\040\uffa3\042\uffa3\047\uffa3\053\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\071\uffa3\072\uffa3\076\uffa3\001" +
    "\002\000\040\011\uffa9\012\uffa9\016\uffa9\017\uffa9\033\uffa9" +
    "\040\uffa9\042\uffa9\047\uffa9\053\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\071\uffa9\072\uffa9\076\uffa9\001\002\000\040\011\uffa5" +
    "\012\uffa5\016\uffa5\017\uffa5\033\uffa5\040\uffa5\042\uffa5\047" +
    "\uffa5\053\uffa5\062\uffa5\063\uffa5\064\uffa5\071\uffa5\072\uffa5" +
    "\076\uffa5\001\002\000\040\011\uff9c\012\uff9c\016\uff9c\017" +
    "\uff9c\033\uff9c\040\uff9c\042\uff9c\047\uff9c\053\uff9c\062\uff9c" +
    "\063\uff9c\064\uff9c\071\uff9c\072\uff9c\076\uff9c\001\002\000" +
    "\040\011\uffa6\012\uffa6\016\uffa6\017\uffa6\033\uffa6\040\uffa6" +
    "\042\uffa6\047\uffa6\053\uffa6\062\uffa6\063\uffa6\064\uffa6\071" +
    "\uffa6\072\uffa6\076\uffa6\001\002\000\040\011\uff9f\012\uff9f" +
    "\016\uff9f\017\uff9f\033\uff9f\040\uff9f\042\uff9f\047\uff9f\053" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\071\uff9f\072\uff9f\076\uff9f" +
    "\001\002\000\040\011\uffa1\012\uffa1\016\uffa1\017\uffa1\033" +
    "\uffa1\040\uffa1\042\uffa1\047\uffa1\053\uffa1\062\uffa1\063\uffa1" +
    "\064\uffa1\071\uffa1\072\uffa1\076\uffa1\001\002\000\040\011" +
    "\uff9b\012\uff9b\016\uff9b\017\uff9b\033\uff9b\040\uff9b\042\uff9b" +
    "\047\uff9b\053\uff9b\062\uff9b\063\uff9b\064\uff9b\071\uff9b\072" +
    "\uff9b\076\uff9b\001\002\000\040\011\uff9d\012\uff9d\016\uff9d" +
    "\017\uff9d\033\uff9d\040\uff9d\042\uff9d\047\uff9d\053\uff9d\062" +
    "\uff9d\063\uff9d\064\uff9d\071\uff9d\072\uff9d\076\uff9d\001\002" +
    "\000\040\011\uffa0\012\uffa0\016\uffa0\017\uffa0\033\uffa0\040" +
    "\uffa0\042\uffa0\047\uffa0\053\uffa0\062\uffa0\063\uffa0\064\uffa0" +
    "\071\uffa0\072\uffa0\076\uffa0\001\002\000\052\034\202\035" +
    "\200\036\204\037\176\043\uffbf\045\uffbf\046\203\047\174" +
    "\050\201\051\206\052\210\054\175\055\212\056\207\057" +
    "\213\060\211\067\uffbf\073\uffbf\075\205\076\uffbf\001\002" +
    "\000\052\034\uffb6\035\uffb6\036\uffb6\037\uffb6\043\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\067\uffb6\073\uffb6\075" +
    "\uffb6\076\uffb6\001\002\000\024\005\036\006\032\007\031" +
    "\010\035\014\034\063\040\065\030\066\041\071\033\001" +
    "\002\000\004\045\220\001\002\000\072\011\uffed\012\uffed" +
    "\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\040\uffed\041\uffed\042\uffed\045\uffed\047\uffed\053\uffed\062" +
    "\uffed\063\uffed\064\uffed\071\uffed\072\uffed\076\uffed\077\uffed" +
    "\001\002\000\042\034\202\035\200\036\204\037\176\046" +
    "\203\047\174\050\201\051\206\052\210\054\175\055\212" +
    "\056\207\057\213\060\211\075\205\076\222\001\002\000" +
    "\004\063\223\001\002\000\004\072\224\001\002\000\042" +
    "\011\116\012\135\016\126\017\143\033\140\040\127\042" +
    "\132\047\112\053\115\062\110\063\146\064\114\071\141" +
    "\072\111\073\225\076\134\001\002\000\052\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\067\uffcc\073\uffcc\075\uffcc\076\uffcc\001\002" +
    "\000\006\067\171\073\227\001\002\000\052\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\067\uffcd\073\uffcd\075\uffcd\076\uffcd\001\002" +
    "\000\006\045\233\074\152\001\002\000\004\045\232\001" +
    "\002\000\072\011\uffcf\012\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\045\uffcf\047\uffcf\053\uffcf\062\uffcf\063\uffcf\064\uffcf\071" +
    "\uffcf\072\uffcf\076\uffcf\077\uffcf\001\002\000\072\011\ufff4" +
    "\012\ufff4\016\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\040\ufff4\041\ufff4\042\ufff4\045\ufff4\047\ufff4\053" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\071\ufff4\072\ufff4\076\ufff4" +
    "\077\ufff4\001\002\000\052\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\067" +
    "\uffb7\073\uffb7\075\uffb7\076\uffb7\001\002\000\006\043\236" +
    "\067\171\001\002\000\052\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\043\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\067" +
    "\uffbb\073\uffbb\075\uffbb\076\uffbb\001\002\000\024\005\036" +
    "\006\032\007\031\010\035\014\034\063\040\065\030\066" +
    "\041\071\033\001\002\000\004\045\241\001\002\000\016" +
    "\002\uffe0\004\uffe0\020\uffe0\021\uffe0\022\uffe0\063\uffe0\001" +
    "\002\000\004\045\244\001\002\000\072\011\uffeb\012\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\045\uffeb\047\uffeb\053\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\071\uffeb\072\uffeb\076\uffeb\077\uffeb" +
    "\001\002\000\072\011\uffec\012\uffec\016\uffec\017\uffec\020" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\040\uffec\041\uffec\042" +
    "\uffec\045\uffec\047\uffec\053\uffec\062\uffec\063\uffec\064\uffec" +
    "\071\uffec\072\uffec\076\uffec\077\uffec\001\002\000\004\041" +
    "\247\001\002\000\052\034\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\043\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\067\uffb3" +
    "\073\uffb3\075\uffb3\076\uffb3\001\002\000\052\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\067\uffb4\073\uffb4\075\uffb4\076\uffb4\001\002" +
    "\000\004\045\251\001\002\000\072\011\uffee\012\uffee\016" +
    "\uffee\017\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\040" +
    "\uffee\041\uffee\042\uffee\045\uffee\047\uffee\053\uffee\062\uffee" +
    "\063\uffee\064\uffee\071\uffee\072\uffee\076\uffee\077\uffee\001" +
    "\002\000\040\011\116\012\135\016\126\017\143\033\140" +
    "\040\127\042\132\047\112\053\115\062\110\063\146\064" +
    "\114\071\141\072\111\076\134\001\002\000\042\034\202" +
    "\035\200\036\204\037\176\046\203\047\174\050\201\051" +
    "\206\052\210\054\175\055\212\056\207\057\213\060\211" +
    "\073\254\075\205\001\002\000\004\070\255\001\002\000" +
    "\062\011\116\012\135\016\126\017\143\020\020\022\142" +
    "\023\121\025\120\027\133\030\145\031\124\033\140\040" +
    "\127\042\132\045\uffc7\047\112\053\115\062\110\063\146" +
    "\064\114\071\141\072\111\076\134\077\130\001\002\000" +
    "\066\011\116\012\135\016\126\017\143\020\020\022\142" +
    "\023\121\024\261\025\120\027\133\030\145\031\124\032" +
    "\257\033\140\040\127\042\132\045\uffc7\047\112\053\115" +
    "\062\110\063\146\064\114\071\141\072\111\076\134\077" +
    "\130\001\002\000\072\011\ufff0\012\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\045\ufff0\047\ufff0\053\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\071\ufff0\072\ufff0\076\ufff0\077\ufff0\001\002\000\072" +
    "\011\ufff9\012\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\040\ufff9\041\ufff9\042\ufff9\045\ufff9\047" +
    "\ufff9\053\ufff9\062\ufff9\063\ufff9\064\ufff9\071\ufff9\072\ufff9" +
    "\076\ufff9\077\ufff9\001\002\000\062\011\116\012\135\016" +
    "\126\017\143\020\020\022\142\023\121\025\120\027\133" +
    "\030\145\031\124\033\140\040\127\042\132\045\uffc7\047" +
    "\112\053\115\062\110\063\146\064\114\071\141\072\111" +
    "\076\134\077\130\001\002\000\064\011\116\012\135\016" +
    "\126\017\143\020\020\022\142\023\121\025\120\027\133" +
    "\030\145\031\124\032\263\033\140\040\127\042\132\045" +
    "\uffc7\047\112\053\115\062\110\063\146\064\114\071\141" +
    "\072\111\076\134\077\130\001\002\000\072\011\uffef\012" +
    "\uffef\016\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033" +
    "\uffef\040\uffef\041\uffef\042\uffef\045\uffef\047\uffef\053\uffef" +
    "\062\uffef\063\uffef\064\uffef\071\uffef\072\uffef\076\uffef\077" +
    "\uffef\001\002\000\064\011\116\012\135\016\126\017\143" +
    "\020\020\022\142\023\121\025\120\026\265\027\133\030" +
    "\145\031\124\033\140\040\127\042\132\045\uffc7\047\112" +
    "\053\115\062\110\063\146\064\114\071\141\072\111\076" +
    "\134\077\130\001\002\000\072\011\uffcb\012\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\045\uffcb\047\uffcb\053\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\071\uffcb\072\uffcb\076\uffcb\077\uffcb\001\002" +
    "\000\052\034\202\035\200\036\204\037\176\043\uffbe\045" +
    "\uffbe\046\203\047\174\050\201\051\206\052\210\054\uffbe" +
    "\055\uffbe\056\207\057\213\060\211\067\uffbe\073\uffbe\075" +
    "\uffbe\076\uffbe\001\002\000\072\011\ufff7\012\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\040\ufff7" +
    "\041\ufff7\042\ufff7\045\ufff7\047\ufff7\053\ufff7\062\ufff7\063" +
    "\ufff7\064\ufff7\071\ufff7\072\ufff7\076\ufff7\077\ufff7\001\002" +
    "\000\054\034\uffaa\035\uffaa\036\uffaa\037\uffaa\043\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\067\uffaa\073" +
    "\uffaa\075\uffaa\076\uffaa\001\002\000\042\034\202\035\200" +
    "\036\204\037\176\046\203\047\174\050\201\051\206\052" +
    "\210\054\175\055\212\056\207\057\213\060\211\073\272" +
    "\075\205\001\002\000\052\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\067" +
    "\uffbd\073\uffbd\075\uffbd\076\uffbd\001\002\000\006\045\274" +
    "\061\275\001\002\000\016\002\uffe1\004\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\063\uffe1\001\002\000\024\005\036\006\032" +
    "\007\031\010\035\014\034\063\040\065\030\066\041\071" +
    "\033\001\002\000\004\045\277\001\002\000\016\002\uffe2" +
    "\004\uffe2\020\uffe2\021\uffe2\022\uffe2\063\uffe2\001\002\000" +
    "\040\011\116\012\135\016\126\017\143\033\140\040\127" +
    "\042\132\047\112\053\115\062\110\063\146\064\114\071" +
    "\141\072\111\076\134\001\002\000\024\005\036\006\032" +
    "\007\031\010\035\014\034\063\040\065\030\066\041\071" +
    "\033\001\002\000\040\011\116\012\135\016\126\017\143" +
    "\033\140\040\127\042\132\047\112\053\115\062\110\063" +
    "\146\064\114\071\141\072\111\076\134\001\002\000\042" +
    "\034\202\035\200\036\204\037\176\045\304\046\203\047" +
    "\174\050\201\051\206\052\210\054\175\055\212\056\207" +
    "\057\213\060\211\075\205\001\002\000\072\011\ufff5\012" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\045\ufff5\047\ufff5\053\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\071\ufff5\072\ufff5\076\ufff5\077" +
    "\ufff5\001\002\000\006\044\307\045\306\001\002\000\100" +
    "\002\uffd0\004\uffd0\011\uffd0\012\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\045\uffd0\047\uffd0\053\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\071\uffd0\072\uffd0\076\uffd0\077\uffd0\001\002\000" +
    "\040\011\116\012\135\016\126\017\143\033\140\040\127" +
    "\042\132\047\112\053\115\062\110\063\146\064\114\071" +
    "\141\072\111\076\134\001\002\000\006\045\311\067\171" +
    "\001\002\000\100\002\uffd2\004\uffd2\011\uffd2\012\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\045\uffd2\047\uffd2\053\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\071\uffd2\072\uffd2\076\uffd2\077" +
    "\uffd2\001\002\000\006\045\313\067\171\001\002\000\100" +
    "\002\uffd1\004\uffd1\011\uffd1\012\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\045\uffd1\047\uffd1\053\uffd1\062\uffd1\063\uffd1" +
    "\064\uffd1\071\uffd1\072\uffd1\076\uffd1\077\uffd1\001\002\000" +
    "\004\040\315\001\002\000\062\011\116\012\135\016\126" +
    "\017\143\020\020\022\142\023\121\025\120\027\133\030" +
    "\145\031\124\033\140\040\127\042\132\045\uffc7\047\112" +
    "\053\115\062\110\063\146\064\114\071\141\072\111\076" +
    "\134\077\130\001\002\000\064\011\116\012\135\016\126" +
    "\017\143\020\020\022\142\023\121\025\120\027\133\030" +
    "\145\031\124\033\140\040\127\041\317\042\132\045\uffc7" +
    "\047\112\053\115\062\110\063\146\064\114\071\141\072" +
    "\111\076\134\077\130\001\002\000\006\045\320\061\321" +
    "\001\002\000\016\002\uffe3\004\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\063\uffe3\001\002\000\024\005\036\006\032\007\031" +
    "\010\035\014\034\063\040\065\030\066\041\071\033\001" +
    "\002\000\004\045\323\001\002\000\016\002\uffe4\004\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\063\uffe4\001\002\000\014\002" +
    "\001\020\020\021\016\022\007\063\017\001\002\000\062" +
    "\011\116\012\135\016\126\017\143\020\020\022\142\023" +
    "\121\025\120\027\133\030\145\031\124\033\140\040\127" +
    "\042\132\045\uffc7\047\112\053\115\062\110\063\146\064" +
    "\114\071\141\072\111\076\134\077\130\001\002\000\064" +
    "\011\116\012\135\016\126\017\143\020\020\022\142\023" +
    "\121\025\120\027\133\030\145\031\124\033\140\040\127" +
    "\041\327\042\132\045\uffc7\047\112\053\115\062\110\063" +
    "\146\064\114\071\141\072\111\076\134\077\130\001\002" +
    "\000\004\045\330\001\002\000\014\002\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\063\uffe5\001\002\000\004\063\332\001\002" +
    "\000\004\045\333\001\002\000\016\002\ufffa\004\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\063\ufffa\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\016\007\012\010\010\015\007\017\005\024\013" +
    "\025\014\001\001\000\002\001\001\000\004\013\330\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\122\005" +
    "\121\011\105\012\136\015\116\017\143\022\112\023\135" +
    "\024\103\026\104\027\124\030\106\001\001\000\004\021" +
    "\214\001\001\000\002\001\001\000\030\004\257\005\121" +
    "\012\136\015\116\017\143\022\112\023\135\024\103\026" +
    "\104\027\124\030\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\270\012\136\023\135\024\166\001" +
    "\001\000\004\023\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\265\012\136\023\135\024\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\122" +
    "\005\121\011\263\012\136\015\116\017\143\022\112\023" +
    "\135\024\103\026\104\027\124\030\106\001\001\000\002" +
    "\001\001\000\004\014\176\001\001\000\002\001\001\000" +
    "\014\005\121\012\136\022\247\023\135\024\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\165" +
    "\006\234\012\136\023\135\024\166\001\001\000\004\024" +
    "\227\001\001\000\012\005\220\012\136\023\135\024\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\165\006\167\012\136\023\135\024\166\001\001\000\002" +
    "\001\001\000\004\023\155\001\001\000\004\024\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\176\001\001\000\004" +
    "\021\214\001\001\000\002\001\001\000\012\005\172\012" +
    "\136\023\135\024\166\001\001\000\002\001\001\000\004" +
    "\014\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\213\012\136\023\135\024\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\176\001\001\000\002\001\001\000\004\013\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\165\006\225\012\136\023\135\024\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\252\012\136\023" +
    "\135\024\166\001\001\000\004\014\176\001\001\000\002" +
    "\001\001\000\032\004\122\005\121\011\255\012\136\015" +
    "\116\017\143\022\112\023\135\024\103\026\104\027\124" +
    "\030\106\001\001\000\030\004\257\005\121\012\136\015" +
    "\116\017\143\022\112\023\135\024\103\026\104\027\124" +
    "\030\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\004\122\005\121\011\261\012\136\015\116\017\143" +
    "\022\112\023\135\024\103\026\104\027\124\030\106\001" +
    "\001\000\030\004\257\005\121\012\136\015\116\017\143" +
    "\022\112\023\135\024\103\026\104\027\124\030\106\001" +
    "\001\000\002\001\001\000\030\004\257\005\121\012\136" +
    "\015\116\017\143\022\112\023\135\024\103\026\104\027" +
    "\124\030\106\001\001\000\002\001\001\000\004\014\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\165\006\311\012\136\023\135" +
    "\024\166\001\001\000\004\013\304\001\001\000\012\005" +
    "\302\012\136\023\135\024\166\001\001\000\004\014\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\165\006\307\012\136\023\135\024\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\004\122" +
    "\005\121\011\315\012\136\015\116\017\143\022\112\023" +
    "\135\024\103\026\104\027\124\030\106\001\001\000\030" +
    "\004\257\005\121\012\136\015\116\017\143\022\112\023" +
    "\135\024\103\026\104\027\124\030\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\010\015\007" +
    "\017\005\024\013\025\014\001\001\000\032\004\122\005" +
    "\121\011\325\012\136\015\116\017\143\022\112\023\135" +
    "\024\103\026\104\027\124\030\106\001\001\000\030\004" +
    "\257\005\121\012\136\015\116\017\143\022\112\023\135" +
    "\024\103\026\104\027\124\030\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }



  public boolean syntaxErrors = false;

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) {
    report_error(
    "Syntax error at line " + (current_token.left+1) + ", column "
    + current_token.right + " ", null
    );
  syntaxErrors = true;
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // source_code ::= functions main functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("source_code",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= source_code EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // functions ::= functions func 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functions ::= functions assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functions ::= functions typedef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functions ::= functions alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // alias ::= ALIAS type IDENTIFIER SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= expr_no SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= nested_id ISEQUAL expression SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= READ nested_id SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= controlflow 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= IF LPAREN expression RPAREN THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= IF LPAREN expression RPAREN THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= RETURN expr_no SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= ALIAS type type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= BREAK INTEGER SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= BREAK SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= typedef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typedef ::= TDEF IDENTIFIER LCURLY typeids RCURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typedef ::= TDEF IDENTIFIER LCURLY RCURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typeids ::= IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeids",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeids ::= typeids COMMA IDENTIFIER COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeids",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // main ::= MAIN LCURLY statements RCURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // func ::= FDEF IDENTIFIER LPAREN typeids RPAREN LCURLY statements RCURLY COLON type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // func ::= FDEF IDENTIFIER LPAREN typeids RPAREN LCURLY statements RCURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // func ::= FDEF IDENTIFIER LPAREN RPAREN LCURLY statements RCURLY COLON type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // func ::= FDEF IDENTIFIER LPAREN RPAREN LCURLY statements RCURLY SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // func ::= FDEF IDENTIFIER LPAREN RPAREN LCURLY RCURLY COLON type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= KFLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= KRAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= KBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= KINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= KCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= DICT LESSTHAN type COMMA type MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= DICT LESSTHAN TOP COMMA type MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type ::= DICT LESSTHAN type COMMA TOP MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type ::= DICT LESSTHAN TOP COMMA TOP MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type ::= SEQ LESSTHAN type MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= SEQ LESSTHAN TOP MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= nested_id COLON type EQUAL expressions SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= nested_id EQUAL expressions SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= nested_id COLON type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // input ::= READ STRING SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // output ::= PRINT expressions SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_call ::= QUEST expression QUEST IDENTIFIER LPAREN expressions RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= QUEST expression QUEST IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // controlflow ::= LOOP statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("controlflow",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressions ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressions ::= expressions COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_no ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_no ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_no",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= nested_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression operator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= LSQUARE expressions RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= IDENTIFIER LSQUARE numeric COLON RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= IDENTIFIER LSQUARE COLON numeric RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= IDENTIFIER LSQUARE numeric COLON numeric RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= LSQUARE RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= nested_id index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= IDENTIFIER IN nested_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= LCURLY keyvals RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // nested_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // nested_id ::= nested_id DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // nested_id ::= nested_id DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // nested_id ::= IDENTIFIER LSQUARE IDENTIFIER RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // nested_id ::= IDENTIFIER LSQUARE INTEGER RSQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // numeric ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // numeric ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // numeric ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // numeric ::= MINUS numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operator ::= ISEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operator ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operator ::= LESSEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operator ::= MOREEQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operator ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operator ::= MORETHAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operator ::= POWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operator ::= MIMP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operator ::= DCOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

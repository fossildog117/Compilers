from __future__ import division
from pyvisgraph.graph import Point, Edge, Graph
from pyvisgraph.vis_graph import VisGraph
from ScenarioWeek4 import GreedyDynamicSchedule as gd

import pyvisgraph as vg

polys = [[vg.Point(0.0,1.0), vg.Point(3.0,1.0), vg.Point(1.5,4.0)],
         [vg.Point(4.0,4.0), vg.Point(7.0,4.0), vg.Point(5.5,8.0)]]


pointArray = []

bigValue = 1

id = 0
for polygon in gd.polygons:
    p = []
    for point in polygon:
        p.append(Point(point[0] * bigValue, point[1] * bigValue, id))
        id += 1
    pointArray.append(p)




g = vg.VisGraph()
g.build(pointArray)
shortest = g.shortest_path(Point(-84.2787860814455 * bigValue,-111.42966972146854 * bigValue), Point(70.69506359346656 * bigValue,78.41810448767427* bigValue))

# (-29.0939934671409, -26.282070505327646), (27.277154257681794, 29.286506198923735)
# (-40.57514036406533, 3.8), (52.946466551349, -4.99644686618755)
# (-84.2787860814455, -111.42966972146854), (70.69506359346656, 78.41810448767427)


print(shortest)

outputString = ""
outputString2 = ""
for p in shortest:
    outputString += "[{x},{y}],".format(x=(p.x/bigValue), y=(p.y/bigValue))
    outputString2 += "({x},{y}),".format(x=(p.x/bigValue), y=(p.y/bigValue))


print(outputString)
print(outputString2)

# (-40.57514036406533,3.8),(-40.107250530132994,4.1191949194803605),(4.175406496760833,-3.998734909058124),(5.121219735988028,-6.83652587991083),(9.273944427991669,-4.0688131781605605),(10.112241239798287,-0.1576421955372227),(35.617398615875445,3.19807223209778),(46.616643638540644,-11.085366042049392),(54.04098273274328,-5.998206813728088),(52.946466551349,-4.99644686618755),
# (-40.57514036406533,3.8),(-40.107250530132994,4.1191949194803605),(4.175406496760833,-3.998734909058124),(5.121219735988028,-6.83652587991083),(9.273944427991669,-4.0688131781605605),(10.112241239798287,-0.1576421955372227),(35.617398615875445,3.19807223209778),(46.616643638540644,-11.085366042049392),(54.04098273274328,-5.998206813728088),(52.946466551349,-4.99644686618755),
# (-40.57514036406533,3.8),(-40.107250530132994,4.1191949194803605),(4.175406496760833,-3.998734909058124),(5.121219735988028,-6.83652587991083),(9.273944427991669,-4.0688131781605605),(10.112241239798287,-0.1576421955372227),(35.617398615875445,3.19807223209778),(46.616643638540644,-11.085366042049392),(54.04098273274328,-5.998206813728088),(52.946466551349,-4.99644686618755)
# (-40.57514036406533,3.8),(-40.107250530132994,4.1191949194803605),(4.175406496760833,-3.998734909058124),(5.121219735988028,-6.83652587991083),(9.273944427991669,-4.0688131781605605),(10.112241239798287,-0.1576421955372227),(35.617398615875445,3.19807223209778),(46.616643638540644,-11.085366042049392),(54.04098273274328,-5.998206813728088),(52.946466551349,-4.99644686618755),





